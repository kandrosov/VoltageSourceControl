/*!
 * \file IVoltageSource.h
 * \brief Definition of IVoltageSource interface.
 * \author Konstantin Androsov (INFN Pisa, Siena University)
 *
 * Copyright 2013, 2014 Konstantin Androsov <konstantin.androsov@gmail.com>
 *
 * This file is part of VoltageSourceControl.
 *
 * VoltageSourceControl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * VoltageSourceControl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with VoltageSourceControl.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "units.h"

namespace vsc {

/*!
 * \brief Interface to operate with voltage source that is also capable to measure set voltage and current.
 */
class IVoltageSource {
public:
    /*!
     * \brief Measurement result container.
     */
    struct Measurement {
        /// Current in Amperes.
        ElectricCurrent Current;

        /// Voltage in Volts.
        ElectricPotential Voltage;

        /// Timestamp when measurement was done.
        Time Timestamp;

        /// Indicates if device is in compliance mode.
        bool Compliance;

        /// Default constructor.
        Measurement() : Current(0.0 * vsc::amperes), Voltage(0.0 * vsc::volts), Timestamp(0.0 * vsc::seconds),
            Compliance(false) {}

        /// Constructor.
        Measurement(const ElectricCurrent& current, const ElectricPotential& voltage, const Time& timestamp,
                    bool compliance)
            : Current(current), Voltage(voltage), Timestamp(timestamp), Compliance(compliance) {}
    };

    /*!
     * \brief Represents a value with setup parameters that can be generated by the IVoltageSource
     */
    struct Value {
        /// Voltage in Volts.
        ElectricPotential Voltage;

        /// Compliance value in Amperes.
        ElectricCurrent Compliance;

        /// Default constructor.
        Value() : Voltage(0.0 * vsc::volts), Compliance(0.0 * vsc::amperes) {}

        /// Constructor.
        Value(const ElectricPotential& voltage, const ElectricCurrent& compliance)
            : Voltage(voltage), Compliance(compliance) {}

        /// Comparison operator 'equal'.
        bool operator==(const Value& other) const {
            return Voltage == other.Voltage && Compliance == other.Compliance;
        }

        /// Comparison operator 'not equal'.
        bool operator!=(const Value& other) const {
            return !(*this == other);
        }
    };

public:
    /*!
     * \brief Set voltage on the source using default compliance value.
     * \param value - desired voltage and setup parameters
     * \return Voltage and setup parameters that were really set on the device. It can be different from 'value' \
     *         due to the device limitations.
     */
    virtual Value Set(const Value& value) = 0;

    /*!
     * \brief Returns the voltage source accuracy to set provided voltage value.
     * \param voltage - desired voltage value.
     * \return voltage source accuracy
     */
    virtual ElectricPotential Accuracy(const ElectricPotential& voltage) = 0;

    /*!
     * \brief Perform measurement of voltage and current.
     * \return Measuremnet result.
     */
    virtual Measurement Measure() = 0;

    /// Turn the voltage off.
    virtual void Off() = 0;

    /// IHighVoltageSource virtual destructor
    virtual ~IVoltageSource() {}
};

}

inline std::ostream& operator << (std::ostream& s, const vsc::IVoltageSource::Measurement& m)
{
    s << "Voltage = " << m.Voltage << ", Current = " << m.Current << ", In compliance = "
      << std::boolalpha << m.Compliance;
    return s;
}

inline std::ostream& operator << (std::ostream& s, const vsc::IVoltageSource::Value& v)
{
    s << "Voltage = " << v.Voltage << ", Compliance = " << v.Compliance;
    return s;
}
